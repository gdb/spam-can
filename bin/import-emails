#!/usr/bin/env ruby
require 'logger'
require 'optparse'

require 'rubygems'
require 'digest/sha1'
require 'iconv'
require 'net/imap'
require 'mail'

require File.join(File.dirname(__FILE__), '../lib/spam-can')

$log = Logger.new(STDOUT)
$log.level = Logger::WARN

module SpamCan
  class EnumeratorHack
    def initialize(&blk)
      @blk = blk
    end

    def next
      @blk.call { |*args| return args }
    end
  end

  class EmailQueue
    include EMHelper

    def initialize(directory, spam)
      @directory = directory
      @spam = spam
    end

    def length
      files.length
    end

    def each
      iterator_map(files.each) do |name|
        contents = File.read(name)
        [contents, @spam]
      end
    end

    def to_s
      "<#{self.class} #{@spam ? 'ham' : 'spam'} directory #{@directory}>"
    end

    private

    def files
      @files ||= Dir[File.join(@directory, '*')]
    end
  end

  class ImportEmails
    include CLIHelper
    include EMHelper

    def initialize(email_queues)
      @email_queues = email_queues
    end

    def do_run
      @email_queues.each do |email_queue|
        checkpoint(:queue)
        log_announce("Beginning work on #{email_queue}")

        # TODO: may want to yield to EM in here
        chunked_iterate(email_queue.each) do |contents, spam|
          checkpoint(:email)

          mail = Mail::Message.new(contents)
          if mail.charset
            begin
              reencoded_contents = convert_to_utf8(contents, mail.charset)
            rescue Iconv::InvalidEncoding
              log_warn("Invalid charset #{mail.charset}; not trying to reencode email")
            end
          end

          reencoded_contents ||= contents
          safe_contents = sanitize_utf8(reencoded_contents)
          log_warn("Sanitized invalid UTF-8 (original charset was #{mail.charset || 'unknown'}) in #{contents.inspect}") unless safe_contents == reencoded_contents
          raise "Sanitization of #{contents.inspect} failed" unless valid_utf8?(safe_contents)
          sha1sum = Digest::SHA1.digest(safe_contents)
          email = Model::Email.new(:sha1sum => BSON::Binary.new(sha1sum),
                                   :contents => safe_contents,
                                   :spam => spam,
                                   :training => reserve_for_training?,
                                   :already_trained => false)
          id = email.save
          log_announce("Scheduled save of #{email}")
        end
      end
    end

    def reserve_for_training?
      rand > 0.5
    end

    def valid_utf8?(str)
      begin
        Iconv.conv('UTF-8', 'UTF-8', str)
        true
      rescue Iconv::IllegalSequence, Iconv::InvalidCharacter
        false
      end
    end

    def convert_to_utf8(str, src_charset)
      return nil if str.nil?
      # In case there are any security vulnerabilities in iconv...
      raise Iconv::InvalidEncoding.new("Weird charset: #{src_charset.inspect}") unless src_charset.length < 100 && src_charset =~ /^[\w-]+$/
      safe_str = str + ' '
      sanitized = Iconv.conv("#{src_charset}//IGNORE", 'UTF-8', safe_str)
      sanitized[0...-1]
    end

    def sanitize_utf8(str)
      return nil if str.nil?
      # Per http://po-ru.com/diary/fixing-invalid-utf-8-in-ruby-revisited/
      # iconv will break if given an invalid trailing byte.  Without this
      # space hack, sanitizing e.g. "\378" will fail
      safe_str = str + ' '
      sanitized = Iconv.conv('UTF-8//IGNORE', 'UTF-8', safe_str)
      sanitized[0...-1]
    end
  end
end

def main
  options = {}
  optparse = OptionParser.new do |opts|
    opts.banner = "Usage: #{$0} [options]"
    
    opts.on('-v', '--verbosity', 'Verbosity of debugging output') do
      $log.level -= 1
    end
    
    opts.on('-h', '--help', 'Display this message') do
      puts opts
      exit(1)
    end
  end
  optparse.parse!

  if ARGV.length == 0
    puts optparse
    return 1
  end

  email_queues = ARGV.map do |dir_spec|
    dir, spam_spec = dir_spec.split(':')
    if spam_spec == 'spam'
      spam = true
    elsif spam_spec == 'ham'
      spam = false
    else
      raise "Invalid spam spec: #{spam_spec.inspect} (in dir spec #{dir_spec.inspect})"
    end
    SpamCan::EmailQueue.new(dir, spam)
  end

  runner = SpamCan::ImportEmails.new(email_queues)
  runner.run
  return 0
end

if $0 == __FILE__
  ret = main
  begin
    exit(ret)
  rescue TypeError
    exit(0)
  end
end
