#!/usr/bin/env ruby
require 'logger'
require 'optparse'
require 'rubygems'

require File.join(File.dirname(__FILE__), '../lib/spam-can')

$log = Logger.new(STDOUT)
$log.level = Logger::WARN

module SpamCan
  class TrainFilter
    include CLIHelper
    include SpamHelper

    def do_run
      i = 0
      Model::Email.find('already_trained' => false).each do |email|
        checkpoint(:email)
        puts (i += 1)

        update_token_counts(email)

        email.already_trained = true
        email.save
      end
    end

    def update_token_counts(email)
      tokenized = tokenize(email.contents)
      log_announce("About to process #{email} (tokenized into #{tokenized.length} unique tokens)")

      # TODO: make this atomic?
      tokenized.each do |token|
        count_attr = email.spam ? 'spam_count' : 'ham_count'
        Model::TokenCount.collection.update({ 'word' => token },
                                            {
                                              '$inc' => { count_attr => 1 },
                                              '$set' => { 'probability' => nil },
                                            },
                                            :upsert => 1)
      end
    end
  end

  class RefreshProbabilities
    include CLIHelper
    include EMHelper

    def do_run
      g = gather(Model::Email.find('spam' => true).count,
                 Model::Email.find('spam' => false).count)
      g.callback do |ham_total, spam_total|
        refresh_probabilities(ham_total, spam_total)
      end
      g.errback do |_, err|
        log_error("Error", err)
      end
    end

    def refresh_probabilities(ham_total, spam_total)
      Model::TokenCount.find.each do |tt|
        checkpoint(:token)

        ham_count = tt.ham_count || 0
        spam_count = tt.spam_count || 0

        ham_score = 2 * ham_count
        spam_score = spam_count
        score_total = ham_score + spam_score

        if score_total >= 5
          ham_component = ham_total != 0 ? min(1, ham_score / ham_total.to_f) : 1
          spam_component = spam_total != 0 ? min(1, spam_score / spam_total.to_f) : 1
          denom = ham_component + spam_component
          probability = denom != 0 ? min(0.99, spam_component / denom) : 0.99
          probability = max(0.01, probability)
          log_announce("Score total is #{score_total}, setting probability for #{tt.word} to #{probability}")
          Model::TokenCount.collection.update({ 'word' => tt.word },
                                               { '$set' => { 'probability' => probability } })
        else
          log_announce("Score total is #{score_total}, so marking #{tt.word} as skipped")
          Model::TokenCount.collection.update({ 'word' => tt.word },
                                               { '$set' => { 'probability' => -1 } })
        end
      end
    end

    def min(*args); args.min; end
    def max(*args); args.max; end
  end
end

def main
  options = {}
  optparse = OptionParser.new do |opts|
    opts.banner = "Usage: #{$0} [options]"
    
    opts.on('-v', '--verbosity', 'Verbosity of debugging output') do
      $log.level -= 1
    end
    
    opts.on('-h', '--help', 'Display this message') do
      puts opts
      exit(1)
    end

    opts.on('-r', '--refresh', 'Refresh the probability table') do
      options[:refresh] = true
    end
  end
  optparse.parse!
  
  if ARGV.length != 0
    puts optparse
    return 1
  end

  if options[:refresh]
    runner = SpamCan::RefreshProbabilities.new
  else
    runner = SpamCan::TrainFilter.new
  end
  runner.run
  return 0
end

if $0 == __FILE__
  ret = main
  begin
    exit(ret)
  rescue TypeError
    exit(0)
  end
end
